# Planet project

Next:
  zoom layers
    1 = globe
    2 = unlit world map, scrollable, looping, zoomable
  zoom sublayers
    0 = full
    max = pixel art

    generate separate textures
      one-time, as a user action, the scaled down MIP level (just in photoshop/aseprite?)
      X automatically padded versions, I probably have a similar build step somewhere already?
      can remove webgl2 requirement
    fancier blending of biomes?
    add local variety (to all layers?) by tile type/color
    add local variety by details to pixel art layer

  use parent layer for 25% of our procgen?

Want:
  pixel art map we can explore
  general features:
    water (various depth shades)
    plains
    forests
    mountains
    ice
    desert
    (maybe) cities / POIs
  mercador -> globe
    cut off map exploration around +/-65deg (use 75%)
    maybe heavy blurring above there to generate reasonable noise density for rotating view
      (or, since it's a 2D hack anyway, it just works?
  variable sized maps
    layers:
      0 pixel art for orrery - generated by scaling down layer #1
        currently: just doing #0/1/2 at different resolutions
      1 pixel art for globe - generated by scaling down layer #2
      2 world map 256x128? 512x256?
      3 explorable
        probably fixed scale, pick somewhere between 16x -> 256x to go from world map -> surface tiles
  always show frontish area when in planet view?

# Galaxy

renderStars takes too long - split into multiple passes too
possibly final step (sort) of realizeStars is now taking too long too

artifact around horizontal borders in layer 6

More detail in the intermediate layers:
  Add some detail paths (twirled by 80-100%?) to some of the zoom in layers
  More, stronger noise in layers 4/5 cause the visible (thresholded) details to better align with the star placements
    but, really messes up the core

Try completely different approach for layer 0
  Generate (thousands of) clusters of stars and draw them as additive glowing dots

Scale
  seed 1 = sum = 1.9M
  @ 100B stars, that's 52.6K per density value = 13.4M for a single core pixel
  @ 1B = 134K
  @ 100B, 512res = 3.3M
  @ 100B, 1024res = 838K

  How many layers of zoom to get ~50 stars on-screen at 100% density?
    if linear, @100B, and dividing by 4 each time, 15 zoom levels  (4^15 = 1B)
      that's looking at 3LY across, that's good
      zoom is 2^15 = 32K which means even a 1K texel gets subdivided into 32*32 screens at max zoom

  Milky Way is 105Kly in diameter
  1 LY = 63K au
  Pluto = 1/1000 ly away from the sun (63au)

  Elite Dangerous:
    galactic core: 3LY (parsec) cubed holds 10 million stars
    the bubble: 3-5 LY betweens closest stars? => 1 star per parsec!
    the fringe often 50LY between stars, more than 100LY in dark areas
  So, what if our density value is instead a "distance between stars"

Plan:
  galaxy top level is 128Kly across
  layer is a 256 density map plus points of interest
  new density map always a 4x reduction?
  output is a texture and a density map and we just blend them

Layers
  0: Galaxy

  6: Stars as points, 3x3 blurred
  7: Stars rendered as gaussian
  8: Stars rendered as minisprites
